@charset "UTF-8";
/* ==========================================================================
   Project Name: 02_Trillo
   Author: Matteo Carotta
   ========================================================================== */
/*/

/**
*For linting options see .jshintrc in the project root folder 
*stylesheet written accring to the ITCSS NemeSpace-BEM (Block Element Modifier) principles
*in camelCase:
*namespace prefixes: --: global variabels; o-: Object; c-: Component; u-: Utility; t-: Theme; s-: Scope;
*is-, has-:  Stete or Condition; _: Hack; js-: JavaScript Bind; qa-: QA or Test Bind
*Visit:
*http://www.jamesturneronline.net/blog/bemit-naming-convention.html
*https://css-tricks.com/bem-101/
*https://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/
*https://css-tricks.com/abem-useful-adaptation-bem/
*/
/*/
/*The author of this code follows CSS Guidelines to write readable, efficient and
scalable code.
visit: https://cssguidelin.es/
*/
/*The architectural baseline is inspired by inuitcss ans ITCSS by Harry Roberts for
extensible, scalable, sass-based, OOCSS
visit: https://github.com/inuitcss/inuitcss
visit: https://www.creativebloq.com/web-design/manage-large-css-projects-itcss-101517528
*/
/*/
/* Plance @import and @charset @font-face rules here 
Any @import rule must be precede first, all other rules and style rules in a 
style sheet besides @charset, which must be the first thing in the 
style sheet if it exists, otherwise the @import rule is invalid. 
Visit: http://www.w3.org/TR/css3-cascade/#at-import */
/**
 * CONTENTS
 *
 * SETTINGS
 * Config...............Project-level configuration and feature switches.
 * Variabels............Project-wide abstract variables.
 *
 * TOOLS
 * Font-size............A mixin which guarantees baseline-friendly line-heights.
 * Clearfix.............Micro clearfix mixin.
 * Hidden...............Mixin for hiding elements.
 * Sass MQ..............inuitcss’ default media query manager.
 *
 * GENERIC
 * Variabels............Non-abstract generic variables.
 * Box-sizing...........Better default `box-sizing`.
 * Normalize.css........A level playing field using @necolas’ Normalize.css.
 * Reset................A tiny reset to complement Normalize.css.
 * Shared...............Sensibly and tersely share some global commonalities
 *                      (particularly useful when managing vertical rhythm).
 *
 * ELEMENTS
 * Page.................Set up our document’s default `font-size` and
 *                      `line-height`.
 * Headings.............Very minimal (i.e. only font-size information) for
 *                      headings 1 through 6.
 * Images...............Base image styles.
 * Tables...............Simple table styles.
 *
 * OBJECTS
 * Wrapper..............Page constraint object.
 * Layout...............Generic layout module.
 * Media................Image- and text-like content side by side. The
 *                      poster-child of OOCSS.
 * Flag.................Table-layout-based advancement on the Media object.
 * List-bare............Lists with no bullets or indents.
 * List-inline..........A list whose items all site in a line.
 * Box..................Simple boxing abstraction.
 * Block................Image-on-top-of-text object.
 * Ratio................A container for maintaining aspect ratio of content.
 * Crop.................Provide a cropping context for media (images, etc.).
 * Table................Classes for manipulating `table`s.
 * Pack.................Pack items into available horizontal space.
 *
 * COMPONENTS
 * Buttons..............An example button component, and how it fits into the
 *                      inuitcss framework.
 *
 * UTILITIES
 * Clearfix.............Bind our clearfix onto a utility class.
 * Widths...............Simple width helper classes.
 * Headings.............Reassigning our heading styles to helper classes.
 * Spacings.............Nudge bits of the DOM around with these spacing
 *                      classes.
 * Responsive-Spacings..Enhances the function of normal spacings for
 *                      responsive usage.
 * Print................Reset-like styles taken from the HTML5 Boilerplate.
 * Hide.................Helper classes to hide content
 */
/*
*/
/*------------------------------------*\
 *--------- #3 GENERIC LAYER ---------*
 *---------- unique rules ------------*
\*-----non-class-based selectors------*/
/*
*/
/*The Generic layer is the first one that actually produces any CSS. 
 *It houses very high-level css. It contains things like normalize 
 *or rest rules or global box-sizing rules. 
 *The Generic layer affects a lot of the DOM.
*/
/**/
/*------------------------------------*\
 *------ _genric.variabels.scss ------*
\* abstracts/non-abstracts variabels  */
/**/
/*/
/*/
/*------------------------------------*\
  #CSS VARIABELS (_generic.variabels)
\*------------------------------------*/
/*css variabels are defined in a declaration block
 *and are reachable only within the scope of that block.
 *Therfore, CSS variabels/CSS custom properties are declared in a :root declaration block
 *to ensure their availability throughout the entire css styling file 
*/
@import url("../node_modules/normalize.css/normalize.css");
@import url("https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,800&display=swap");
:root {
  --color-primary: #eb2f64;
  --color-primary-light: #ff3366;
  --color-primary-dark: #ba265d;
  --color-gray-light-1: #faf9f9;
  --color-gray-light-2: #f4f2f2;
  --color-gray-light-3: #f0eeee;
  --color-gray-light-4: #ccc;
  --color-gray-dark-1: #333;
  --color-gray-dark-2: #777;
  --color-gray-dark-3: #999;
  --gradient-shadow-primary: rgba(0,0,0, .15); }

/*------ end of: css variabels -------*/
/**/
/*                                    *\
 *-- end of: _genric.variabels.scss --*
\*------------------------------------*/
/**/
/*------------------------------------*\
 *-------- _genric.base.scss ---------*
\*                                    */
/**/
html {
  font-size: 62.5%;
  /*16px * 62.5% = 10px*/
  /*rem are not supported in IE6 */
  /*In Desktop First media quesries are written from biggest screen to smallest one*/
  box-sizing: border-box;
  /*visit: https://css-tricks.com/box-sizing/*/
  /* visit: https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing */ }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%;
      /*16px * 75% = 12px*/ } }
  @media (max-width: 75em) {
    html {
      font-size: 56.25%;
      /*16px *  56.25% = 9rem*/ } }
  @media (max-width: 56.25em) {
    html {
      font-size: 50%;
      /*16px * 50% = 8px*/ } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*visit: https://css-tricks.com/box-sizing/*/
  /* visit: https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing */ }

body {
  min-height: 100vh;
  font-size: 2rem;
  font-family: "Open Sans", Arial, sans-serif;
  font-weight: 400;
  line-height: 1.6;
  color: var(--color-gray-dark-2);
  background-size: cover;
  background-repeat: no-repeat;
  padding: 30px; }
  @supports (background-image: linear-gradient(black, white)) or (background-image: -webkit-gradient(black, white)) {
    body {
      background-image: -webkit-gradient(linear, left top, right bottom, from(var(--color-primary-light)), to(var(--color-primary-dark)));
      background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark)); } }
  @media (max-width: 56.25em) {
    body {
      padding: 0; } }

::selection {
  background-color: orange;
  color: white; }

/**/
/*                                    *\
 *----- end of: _genric.base.scss -----*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
*------ END OF: #3 GENERIC LAYER ------*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
 *-------- #4 ELEMENTS LAYER ---------*
 *-------- non-reusable rules --------*
\*------non-class-based selectors-----*/
/*
*/
/*These are bare, unclassed HTML elements. 
What does an h1 look like without a class on it? 
What does an a look like without a class on it? 
The Elements layer binds onto bare HTML element (or 'type') selectors only. 
It is slightly more explicit than the previous layer 
in that we are now saying 'make every h1 this big', or 'make every a 
be a certain colour'. It is still a very low-specificity layer, 
but affects slightly less of the DOM, and is slightly more opinionated, 
hence its location in the Triangle.
The Elements layer is typically the last one in which we'd find bare, 
element-based selectors, and is very rarely added to or changed after 
initial setup. Once we have defined element-level styles, all additions and 
deviations should be implemented using classes.
*/
/**/
/*------------------------------------*\
 *------- _elements.page.scss --------*
\*                                    */
/**/
/*------------------------------------*\
  #example
*/
/*---------- end of: example ---------*/
/**/
/*                                    *\
 *-- end of: _genric.variabels.scss --*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
*----- END OF: #4 ELEMENTS LAYER ------*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
 *--------- #5 OBJECTS LAYER ---------*
 *---------- reusable rules ----------*
\*-------class-based selectors--------*/
/*
*/
/*This is the first layer in which we find class-based selectors. 
These are concerned with styling non-cosmetic design patterns, or 'objects'. 
Objects can range from something as simple as a .wrapper element, 
to layout systems, through to things like the OOCSS 
poster child – the Media Object. This layer affects less of the DOM 
than the last layer, has a higher specificity, and is slightly more 
explicit in that we are now targeting sections of the DOM with classes.
This is where a large part of the work will happen after
initial project set-up. Adding new objects and features usually 
makes up the vast majority of development.
*/
/**/
/*------------------------------------*\
 *------ _objects.layout.scss -------*
\*                                    */
/**/
/*------------------------------------*\
  *layout
*/
.o-layout_container {
  max-width: 120rem;
  margin: 8rem auto;
  background-color: var(--color-gray-light-2);
  box-shadow: 0 2rem 6rem var(--gradient-shadow-primary);
  min-height: 50rem; }

.o-layout_header {
  height: 7rem;
  background-color: white;
  border-bottom: var(--color-gray-light-2); }

.o-layout_contentBox {
  display: flex; }

.o-layout_sidebar {
  background-color: var(--color-gray-dark-1);
  flex: 0 0 18%;
  /*Flex-grow Flex-shrink Flex-base*/
  /*the element dimension on the ax*/ }

.o-layout_hotelView {
  background-color: white;
  flex: 1; }

/*---------- end of: layout ---------*/
/**/
/*                                    *\
 *--- end of: _objects.objects.scss ---*
\*------------------------------------*/
/**/
/*------------------------------------*\
 *------ _objects.objects.scss -------*
\*                                    */
/**/
/**/
/*                                    *\
 *--- end of: _objects.objects.scss ---*
\*------------------------------------*/
/**/
/*------------------------------------*\
 *----- _objects.typography.scss ------*
\*                                    */
/**/
/**/
/*                                    *\
 *-- end of: _objects.typography.scss -*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
*------ END OF: #5 OBJECTS LAYER ------*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
 *------- #6 COMPONENTS LAYER --------*
 *-------- non-reusable rules --------*
\*-------class-based selectors--------*/
/*
*/
/*The Components layer is where explicit elements of the DOM are 
being styled individually.
Together with the objects layer, this is where 
the majority of the work will happen after initial project set-up. 
In this layer properties are added to the more abstracts 
rules of the objects to instantiate them according to the 
specific parameters of the UI being styled.
*/
/**/
/*------------------------------------*\
 *---- _components.components.scss ----*
\*                                    */
/**/
/*------------------------------------*\
  #example
*/
/*---------- end of: example ---------*/
/**/
/*                                    *\
 * end of: _components.components.scss *
\*------------------------------------*/
/*
*/
/*------------------------------------*\
*----- END OF: #6 COMPONENTS LAYER ----*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
 *-------- #7 UTILITIES LAYER --------*
 *------- non-reusable rules ---------*
\*------class-based selectors---------*/
/*
*/
/*This layer contains rules that has the power to override 
 *any other rule previously assigned to an DOM element. 
 *The use of this rules should be avoided as it contains utility, 
 *helper classes, hacks and overrides, which move the styling to
 *the html markup;
 *A lot of the declarations in this layer will carry !important. 
 *This is the highest specificity layer – it includes the most 
 *explicit types of rule, with the most narrow focus.
 *
 *namespace prefixes in this layer are: 
 *u-: utilities and helper classes;
 *_: hacks and overrides classes.
*/
/**/
/*------------------------------------*\
 *----- _utilities.utilities.scss -----*
\*                                    */
/**/
/*------------------------------------*\
  #example
*/
/*---------- end of: example ---------*/
.u-btn-reset {
  background: none;
  color: inherit;
  border: none;
  padding: 0;
  font: inherit;
  cursor: pointer;
  outline: inherit; }

.u-clearfix {
  zoom: 1;
  /* clearfix is a class to be assigned to a html element 
  that uses the float property to clear it or reset to 
  standard the float property of the elemnts after the it */ }

.u-clearfix::after {
  content: '';
  clear: both;
  /* visit: https://developer.mozilla.org/en-US/docs/Web/CSS/clear */
  display: table;
  height: 0;
  visibility: hidden; }

.u-centerText {
  text-align: center; }

/**/
/*                                    *\
 *- end of: _utilities.utilities.scss -*
\*------------------------------------*/
/*
*/
/*------------------------------------*\
*----- END OF: #7 UTILITIES LAYER -----*
\*------------------------------------*/
